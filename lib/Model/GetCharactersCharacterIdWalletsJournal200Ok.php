<?php
/**
 * GetCharactersCharacterIdWalletsJournal200Ok
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.5.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetCharactersCharacterIdWalletsJournal200Ok Class Doc Comment
 *
 * @category    Class
 * @description 200 ok object
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetCharactersCharacterIdWalletsJournal200Ok implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'get_characters_character_id_wallets_journal_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'float',
        'argument_name' => 'string',
        'argument_value' => 'int',
        'balance' => 'float',
        'date' => '\DateTime',
        'first_party_id' => 'int',
        'first_party_type' => 'string',
        'reason' => 'string',
        'ref_id' => 'int',
        'ref_type_id' => 'int',
        'second_party_id' => 'int',
        'second_party_type' => 'string',
        'tax_amount' => 'float',
        'tax_reciever_id' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'argument_name' => 'argument_name',
        'argument_value' => 'argument_value',
        'balance' => 'balance',
        'date' => 'date',
        'first_party_id' => 'first_party_id',
        'first_party_type' => 'first_party_type',
        'reason' => 'reason',
        'ref_id' => 'ref_id',
        'ref_type_id' => 'ref_type_id',
        'second_party_id' => 'second_party_id',
        'second_party_type' => 'second_party_type',
        'tax_amount' => 'tax_amount',
        'tax_reciever_id' => 'tax_reciever_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'argument_name' => 'setArgumentName',
        'argument_value' => 'setArgumentValue',
        'balance' => 'setBalance',
        'date' => 'setDate',
        'first_party_id' => 'setFirstPartyId',
        'first_party_type' => 'setFirstPartyType',
        'reason' => 'setReason',
        'ref_id' => 'setRefId',
        'ref_type_id' => 'setRefTypeId',
        'second_party_id' => 'setSecondPartyId',
        'second_party_type' => 'setSecondPartyType',
        'tax_amount' => 'setTaxAmount',
        'tax_reciever_id' => 'setTaxRecieverId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'argument_name' => 'getArgumentName',
        'argument_value' => 'getArgumentValue',
        'balance' => 'getBalance',
        'date' => 'getDate',
        'first_party_id' => 'getFirstPartyId',
        'first_party_type' => 'getFirstPartyType',
        'reason' => 'getReason',
        'ref_id' => 'getRefId',
        'ref_type_id' => 'getRefTypeId',
        'second_party_id' => 'getSecondPartyId',
        'second_party_type' => 'getSecondPartyType',
        'tax_amount' => 'getTaxAmount',
        'tax_reciever_id' => 'getTaxRecieverId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const FIRST_PARTY_TYPE_CHARACTER = 'character';
    const FIRST_PARTY_TYPE_CORPORATION = 'corporation';
    const FIRST_PARTY_TYPE_ALLIANCE = 'alliance';
    const FIRST_PARTY_TYPE_FACTION = 'faction';
    const SECOND_PARTY_TYPE_CHARACTER = 'character';
    const SECOND_PARTY_TYPE_CORPORATION = 'corporation';
    const SECOND_PARTY_TYPE_ALLIANCE = 'alliance';
    const SECOND_PARTY_TYPE_FACTION = 'faction';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFirstPartyTypeAllowableValues()
    {
        return [
            self::FIRST_PARTY_TYPE_CHARACTER,
            self::FIRST_PARTY_TYPE_CORPORATION,
            self::FIRST_PARTY_TYPE_ALLIANCE,
            self::FIRST_PARTY_TYPE_FACTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSecondPartyTypeAllowableValues()
    {
        return [
            self::SECOND_PARTY_TYPE_CHARACTER,
            self::SECOND_PARTY_TYPE_CORPORATION,
            self::SECOND_PARTY_TYPE_ALLIANCE,
            self::SECOND_PARTY_TYPE_FACTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['argument_name'] = isset($data['argument_name']) ? $data['argument_name'] : null;
        $this->container['argument_value'] = isset($data['argument_value']) ? $data['argument_value'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['first_party_id'] = isset($data['first_party_id']) ? $data['first_party_id'] : null;
        $this->container['first_party_type'] = isset($data['first_party_type']) ? $data['first_party_type'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['ref_type_id'] = isset($data['ref_type_id']) ? $data['ref_type_id'] : null;
        $this->container['second_party_id'] = isset($data['second_party_id']) ? $data['second_party_id'] : null;
        $this->container['second_party_type'] = isset($data['second_party_type']) ? $data['second_party_type'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['tax_reciever_id'] = isset($data['tax_reciever_id']) ? $data['tax_reciever_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['date'] === null) {
            $invalid_properties[] = "'date' can't be null";
        }
        $allowed_values = ["character", "corporation", "alliance", "faction"];
        if (!in_array($this->container['first_party_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'first_party_type', must be one of 'character', 'corporation', 'alliance', 'faction'.";
        }

        if ($this->container['ref_id'] === null) {
            $invalid_properties[] = "'ref_id' can't be null";
        }
        if ($this->container['ref_type_id'] === null) {
            $invalid_properties[] = "'ref_type_id' can't be null";
        }
        $allowed_values = ["character", "corporation", "alliance", "faction"];
        if (!in_array($this->container['second_party_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'second_party_type', must be one of 'character', 'corporation', 'alliance', 'faction'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['date'] === null) {
            return false;
        }
        $allowed_values = ["character", "corporation", "alliance", "faction"];
        if (!in_array($this->container['first_party_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['ref_id'] === null) {
            return false;
        }
        if ($this->container['ref_type_id'] === null) {
            return false;
        }
        $allowed_values = ["character", "corporation", "alliance", "faction"];
        if (!in_array($this->container['second_party_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets amount
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param float $amount Transaction amount. Positive when value transferred to the first party. Negative otherwise
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets argument_name
     * @return string
     */
    public function getArgumentName()
    {
        return $this->container['argument_name'];
    }

    /**
     * Sets argument_name
     * @param string $argument_name argument_name string
     * @return $this
     */
    public function setArgumentName($argument_name)
    {
        $this->container['argument_name'] = $argument_name;

        return $this;
    }

    /**
     * Gets argument_value
     * @return int
     */
    public function getArgumentValue()
    {
        return $this->container['argument_value'];
    }

    /**
     * Sets argument_value
     * @param int $argument_value argument_value integer
     * @return $this
     */
    public function setArgumentValue($argument_value)
    {
        $this->container['argument_value'] = $argument_value;

        return $this;
    }

    /**
     * Gets balance
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     * @param float $balance Wallet balance after transaction occurred
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date Date and time of transaction
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets first_party_id
     * @return int
     */
    public function getFirstPartyId()
    {
        return $this->container['first_party_id'];
    }

    /**
     * Sets first_party_id
     * @param int $first_party_id first_party_id integer
     * @return $this
     */
    public function setFirstPartyId($first_party_id)
    {
        $this->container['first_party_id'] = $first_party_id;

        return $this;
    }

    /**
     * Gets first_party_type
     * @return string
     */
    public function getFirstPartyType()
    {
        return $this->container['first_party_type'];
    }

    /**
     * Sets first_party_type
     * @param string $first_party_type first_party_type string
     * @return $this
     */
    public function setFirstPartyType($first_party_type)
    {
        $allowed_values = array('character', 'corporation', 'alliance', 'faction');
        if (!is_null($first_party_type) && (!in_array($first_party_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'first_party_type', must be one of 'character', 'corporation', 'alliance', 'faction'");
        }
        $this->container['first_party_type'] = $first_party_type;

        return $this;
    }

    /**
     * Gets reason
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     * @param string $reason reason string
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets ref_id
     * @return int
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     * @param int $ref_id Unique journal reference ID
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets ref_type_id
     * @return int
     */
    public function getRefTypeId()
    {
        return $this->container['ref_type_id'];
    }

    /**
     * Sets ref_type_id
     * @param int $ref_type_id Transaction type
     * @return $this
     */
    public function setRefTypeId($ref_type_id)
    {
        $this->container['ref_type_id'] = $ref_type_id;

        return $this;
    }

    /**
     * Gets second_party_id
     * @return int
     */
    public function getSecondPartyId()
    {
        return $this->container['second_party_id'];
    }

    /**
     * Sets second_party_id
     * @param int $second_party_id second_party_id integer
     * @return $this
     */
    public function setSecondPartyId($second_party_id)
    {
        $this->container['second_party_id'] = $second_party_id;

        return $this;
    }

    /**
     * Gets second_party_type
     * @return string
     */
    public function getSecondPartyType()
    {
        return $this->container['second_party_type'];
    }

    /**
     * Sets second_party_type
     * @param string $second_party_type second_party_type string
     * @return $this
     */
    public function setSecondPartyType($second_party_type)
    {
        $allowed_values = array('character', 'corporation', 'alliance', 'faction');
        if (!is_null($second_party_type) && (!in_array($second_party_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'second_party_type', must be one of 'character', 'corporation', 'alliance', 'faction'");
        }
        $this->container['second_party_type'] = $second_party_type;

        return $this;
    }

    /**
     * Gets tax_amount
     * @return float
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     * @param float $tax_amount Tax amount received for tax related transactions
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets tax_reciever_id
     * @return int
     */
    public function getTaxRecieverId()
    {
        return $this->container['tax_reciever_id'];
    }

    /**
     * Sets tax_reciever_id
     * @param int $tax_reciever_id For tax related transactions, gives the corporation ID of the entity receiving the tax
     * @return $this
     */
    public function setTaxRecieverId($tax_reciever_id)
    {
        $this->container['tax_reciever_id'] = $tax_reciever_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


